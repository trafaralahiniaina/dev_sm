# Generated by Django 5.0.5 on 2024-05-10 15:27

import core.managers
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('academics', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
        ('schools', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('profile_picture', models.TextField(blank=True, null=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='%(app_label)s_%(class)s_groups', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='%(app_label)s_%(class)s_user_permissions', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', core.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='SiteAdmin',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.user')),
                ('role', models.CharField(choices=[('admin', 'Administrateur'), ('developer', 'Développeur'), ('integrator', 'Intégrateur'), ('moderator', 'Modérateur')], max_length=50)),
            ],
            options={
                'abstract': False,
            },
            bases=('core.user',),
            managers=[
                ('objects', core.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Parent',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.user')),
                ('phone_number', models.CharField(max_length=20, unique=True)),
                ('address', models.CharField(max_length=200, null=True)),
                ('role', models.CharField(choices=[('mother', 'mère'), ('father', 'père'), ('tutor', 'tuteur')], max_length=50, null=True)),
                ('parent_children_schools', models.ManyToManyField(related_name='parents', to='schools.school')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.user',),
            managers=[
                ('objects', core.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='SchoolAdmin',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.user')),
                ('role', models.CharField(choices=[('school_admin', "Administrateur d'école"), ('content_integrator', 'Intégrateur de contenu'), ('moderator', 'Modérateur'), ('staff', 'Personnel')], max_length=50)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admins', to='schools.school')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.user',),
            managers=[
                ('objects', core.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.user')),
                ('student_id', models.CharField(max_length=20, unique=True)),
                ('address', models.CharField(max_length=200)),
                ('grade_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='schools.grade')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='schools.school')),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='schools.section')),
                ('student_parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='students', to='core.parent')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.user',),
            managers=[
                ('objects', core.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.user')),
                ('phone_number', models.CharField(max_length=20, unique=True)),
                ('teacher_schools', models.ManyToManyField(related_name='teachers', to='schools.school')),
                ('teacher_subjects', models.ManyToManyField(related_name='teachers', to='academics.subject')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.user',),
            managers=[
                ('objects', core.managers.UserManager()),
            ],
        ),
    ]
